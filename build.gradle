/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Groovy library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5.1/userguide/building_java_projects.html
 */

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.9.21'
    id 'java-library'
    id 'groovy'
    id 'com.autonomousapps.dependency-analysis' version '1.26.0'
    id 'org.jmailen.kotlinter' version '4.1.0'
    id 'com.dorongold.task-tree' version '2.1.1'
    id 'com.github.ben-manes.versions' version '0.50.0'
    id 'net.idlestate.gradle-duplicate-classes-check' version '1.2.0'
}

group 'uk.org.lidalia'
version '1.0.0'

repositories {
    mavenCentral()
}

def versions = [
    groovy    : '4.0.15',
    spock     : '2.3-groovy-4.0',
]

dependencies {
    // Use the latest Groovy version for building this library
    api "org.apache.groovy:groovy:${versions.groovy}"
    runtimeOnly "org.apache.groovy:groovy-all:${versions.groovy}"

    // Use the awesome Spock testing and specification framework even with Java
    testImplementation "org.spockframework:spock-core:${versions.spock}"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.1'

    modules {
        module("org.hamcrest:hamcrest-core") {
            replacedBy("org.hamcrest:hamcrest")
        }
        module("org.hamcrest:hamcrest-library") {
            replacedBy("org.hamcrest:hamcrest")
        }
    }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

tasks.named('compileGroovy') {
    classpath += files(tasks.compileKotlin.destinationDirectory)
}

tasks.named('compileTestGroovy') {
    classpath += files(tasks.compileTestKotlin.destinationDirectory)
}

checkForDuplicateClasses {
    def configs = configurations.findAll { it.name !in [
            'adviceAllConsumer',
            'kotlinBuildToolsApiClasspath',
    ] }
    configurationsToCheck(configs)
}

dependencyAnalysis {
    issues {
        // configure for all projects
        all {
            // set behavior for all issue types
            onAny {
                severity("fail")
                exclude("org.jetbrains.kotlin:kotlin-stdlib")
            }
        }
    }
}

check.dependsOn('buildHealth')
